<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lx&#39;s Blog</title>
  
  <subtitle>Hello world!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://he11olx.com/"/>
  <updated>2018-08-05T07:15:43.640Z</updated>
  <id>http://he11olx.com/</id>
  
  <author>
    <name>He11oLx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【CPython3.6源码分析】Python 垃圾回收</title>
    <link href="http://he11olx.com/2018/08/05/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.15.%20Python%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>http://he11olx.com/2018/08/05/1.CPython3.6源码分析/1.15. Python 垃圾回收/</id>
    <published>2018-08-05T10:00:00.000Z</published>
    <updated>2018-08-05T07:15:43.640Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;垃圾回收一般分为两个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;垃圾检测，从所有已分配的内存中识别出可以回收和不可以回收的内存&lt;/li&gt;
&lt;li&gt;垃圾回收，是系统从掌握在检测阶段标识出的可回收内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python 基于古老的引用计数，必须在每次分配和释放内存时，加入 计数 的动作。&lt;br&gt;引用计数，其特点和缺点都很明显&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：实时性，发生在整个程序运行期间&lt;/li&gt;
&lt;li&gt;缺点：循环引用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python 为了解决循环引用，引入了标记清除和分代收集两种技术。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="内存管理" scheme="http://he11olx.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】Python 内存管理机制</title>
    <link href="http://he11olx.com/2018/08/05/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.14.Python%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://he11olx.com/2018/08/05/1.CPython3.6源码分析/1.14.Python 内存管理/</id>
    <published>2018-08-05T04:00:00.000Z</published>
    <updated>2018-08-05T07:29:20.958Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0445/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PEP445&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/c-api/memory.html#default-memory-allocators&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;default-memory-allocators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;内存策略&quot;&gt;&lt;a href=&quot;#内存策略&quot; class=&quot;headerlink&quot; title=&quot;内存策略&quot;&gt;&lt;/a&gt;内存策略&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;An object allocator for Python.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Here is an introduction to the layers of the Python memory architecture,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   showing where the object allocator is actually used (layer +2), It is&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   called for every object allocation and deallocation (PyObject_New/Del).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   This is also the place where the cyclic garbage collector operates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   selectively on container objects.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _____   ______   ______       ________&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [ int ] [ dict ] [ list ] ... [ string ]       Python core         |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+3 | &amp;lt;----- Object-specific memory -----&amp;gt; | &amp;lt;-- Non-object memory --&amp;gt; |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _______________________________       |                           |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [   Python&amp;apos;s object allocator   ]      |                           |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+2 | ####### Object memory ####### | &amp;lt;------ Internal buffers ------&amp;gt; |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ______________________________________________________________    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [          Python&amp;apos;s raw memory allocator (PyMem_ API)          ]   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+1 | &amp;lt;----- Python memory (under PyMem manager&amp;apos;s control) ------&amp;gt; |   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __________________________________________________________________&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [    Underlying general-purpose allocator (ex: C library malloc)   ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 0 | &amp;lt;------ Virtual memory allocated for the python process -------&amp;gt; |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   =========================================================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _______________________________________________________________________&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [                OS-specific Virtual Memory Manager (VMM)               ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-1 | &amp;lt;--- Kernel dynamic storage allocation &amp;amp; management (page-based) ---&amp;gt; |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __________________________________   __________________________________&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [                                  ] [                                  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-2 | &amp;lt;-- Physical memory: ROM/RAM --&amp;gt; | | &amp;lt;-- Secondary storage (swap) --&amp;gt; |&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过&lt;code&gt;obmalloc.c&lt;/code&gt;这段注释，我们可以获取到很多内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 内存管理，是分层次的&lt;/li&gt;
&lt;li&gt;对象的创建、销毁、 GC 都发生在+2层&lt;/li&gt;
&lt;li&gt;在最顶层，不同的对象有着不同的分配策略&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从分层机制上看，似乎这个 allocator 不是固定的，那么是不是意味着可以自定义？&lt;br&gt;答案是肯定的，在 3.6 中可以通过环境变量 PYTHONMALLOC 改变分配器，甚至是自定义，&lt;br&gt;参考&lt;a href=&quot;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONMALLOC&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Environment variables&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="内存管理" scheme="http://he11olx.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】Python 多线程机制</title>
    <link href="http://he11olx.com/2018/08/04/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.13.Python%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/"/>
    <id>http://he11olx.com/2018/08/04/1.CPython3.6源码分析/1.13.Python 多线程机制/</id>
    <published>2018-08-04T10:00:00.000Z</published>
    <updated>2018-08-05T07:15:43.630Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Python 的 GIL 可谓“大名鼎鼎”，正是由它控制着字节码解释器的执行权限。跟操作系统的进程调度一样，Python 必然会存在一个调度机制，决定了什么时候该进行线程切换。Python 也通过时间片的方式，挂起当前线程，切换其他线程。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sys.getcheckinterval()、sys.setcheckinterval()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在 Python3.2 中已经被弃用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sys.getswitchinterval()、sys.setswitchinterval()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/* microseconds (the Python API uses seconds, though) */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define DEFAULT_INTERVAL 5000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static unsigned long gil_interval = DEFAULT_INTERVAL;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从3.2起，Python 的线程时间片控制，由以前的指令数改为了时间控制，默认0.005秒，可通过API进行更改。线程调度策略，依然是由操作系统决定，解释器仅参与GIL的释放和申请。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】Python 环境初始化</title>
    <link href="http://he11olx.com/2018/08/04/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.12.Python%20%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://he11olx.com/2018/08/04/1.CPython3.6源码分析/1.12.Python 环境初始化/</id>
    <published>2018-08-04T04:00:00.000Z</published>
    <updated>2018-08-05T07:29:20.964Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/c-api/init.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Before Python Initialization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一步步走来，我们已经了解了 Python对象机制，字节码执行机制，函数调用，类实例创建机制。这些内容都是在 Python 环境已经初始化完成后，才进行的工作。那么是时候看看，运行环境初始化，都干了些什么。&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;main&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;main&quot;&gt;&lt;a href=&quot;#main&quot; class=&quot;headerlink&quot; title=&quot;main&quot;&gt;&lt;/a&gt;main&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// python.c.18&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; **argv)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res = Py_Main(argc, argv_copy);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Modules/main.c.348&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Py_Main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;wchar_t&lt;/span&gt; **argv)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Py_Initialize();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (command) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sts = run_command(command, &amp;amp;cf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PyMem_RawFree(command);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sts = (RunModule(&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 处理 fp、filename */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sts = run_file(fp, filename, &amp;amp;cf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sts &lt;span class=&quot;comment&quot;&gt;/* 0 正常退出，1 异常退出，2 参数列表不正确 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，跟普通的 C 程序一样，通过入口 main 进入到 Py_Main，在调用&lt;code&gt;Py_Initialize&lt;/code&gt;进行初始化，然后根据参数列表进行分发。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】Python 自定义类</title>
    <link href="http://he11olx.com/2018/07/28/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.11.Python%20%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB/"/>
    <id>http://he11olx.com/2018/07/28/1.CPython3.6源码分析/1.11.Python 自定义类/</id>
    <published>2018-07-28T10:00:00.000Z</published>
    <updated>2018-08-05T07:09:35.457Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-3115/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PEP3115 Metaclasses in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在上一讲，我们谈到了内置类的初始化工作，其中最主要的逻辑落在 PyType_Ready 中。本讲，我们将主要查看用户自定义类及实例化，在 Python 中的实现过程。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="类机制" scheme="http://he11olx.com/tags/%E7%B1%BB%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】Python 类机制</title>
    <link href="http://he11olx.com/2018/07/28/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.10.Python%20%E7%B1%BB%E6%9C%BA%E5%88%B6/"/>
    <id>http://he11olx.com/2018/07/28/1.CPython3.6源码分析/1.10.Python 类机制/</id>
    <published>2018-07-28T04:00:00.000Z</published>
    <updated>2018-08-05T07:36:24.452Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://he11olx.com/2018/07/14/1.0.PyObject/&quot;&gt;PyObject/PyObjectType&lt;/a&gt;，我们已经看到过，PyObject、PyTypeObject、PyType_Type、PyBaseObject_Type。&lt;/p&gt;
&lt;p&gt;下面通过几个例子来具体描述关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实例，通过&lt;code&gt;isinstance()&lt;/code&gt;方法，检查其 ob_type 是否一致。&lt;/li&gt;
&lt;li&gt;子类，通过&lt;code&gt;issubclass()&lt;/code&gt;方法，检查其 bases 是否存在继承关系。
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="类机制" scheme="http://he11olx.com/tags/%E7%B1%BB%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】Python 函数机制</title>
    <link href="http://he11olx.com/2018/07/21/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.9.Python%20%E5%87%BD%E6%95%B0%E6%9C%BA%E5%88%B6/"/>
    <id>http://he11olx.com/2018/07/21/1.CPython3.6源码分析/1.9.Python 函数机制/</id>
    <published>2018-07-21T14:00:00.000Z</published>
    <updated>2018-08-05T07:10:15.487Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.6/c-api/function.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Function Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/python/cpython/blob/3.6/Doc/library/dis.rst&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dis.rst: Disassembler for Python bytecode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在前面我们已经知道 Python 通过PyInterpreterState 对象模拟进程的状态信息，通过 PyThreadState 对象模拟线程的状态信息，通过PyFrameObject 模拟函数调用时的栈帧信息。FrameObject 通过 f_back 指针，形成函数调用的链式结构。那么要实现函数间的调用，就必然存在多个 Frame。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="PyFunctionObject" scheme="http://he11olx.com/tags/PyFunctionObject/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】Python 异常控制</title>
    <link href="http://he11olx.com/2018/07/21/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.8.Python%20%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6/"/>
    <id>http://he11olx.com/2018/07/21/1.CPython3.6源码分析/1.8.Python 异常控制/</id>
    <published>2018-07-21T10:00:00.000Z</published>
    <updated>2018-08-05T07:06:37.509Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本章将通过字节码指令，探究 Python 中&lt;code&gt;try-except&lt;/code&gt;等异常控制语句的实现及原理。阅读本章前需了解&lt;a href=&quot;https://he11olx.com/2018/07/21/1.5.Python%20Code%20Frame/&quot;&gt;PyCodeObject/PyFrameObject&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="try-except" scheme="http://he11olx.com/tags/try-except/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】Python 控制字节码执行</title>
    <link href="http://he11olx.com/2018/07/21/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.7.Python%20%E6%8E%A7%E5%88%B6%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <id>http://he11olx.com/2018/07/21/1.CPython3.6源码分析/1.7.Python 控制字节码/</id>
    <published>2018-07-21T08:00:00.000Z</published>
    <updated>2018-08-05T07:15:43.620Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本章将通过几个字节码指令，探究 Python 中&lt;code&gt;if&lt;/code&gt;及&lt;code&gt;for&lt;/code&gt;语句的实现及原理，&lt;br&gt;阅读本章前需了解&lt;a href=&quot;https://he11olx.com/2018/07/21/1.5.Python%20Code%20Frame/&quot;&gt;PyCodeObject/PyFrameObject&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="PyCodeObject" scheme="http://he11olx.com/tags/PyCodeObject/"/>
    
      <category term="EvalFrame" scheme="http://he11olx.com/tags/EvalFrame/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】Python 一般字节码执行</title>
    <link href="http://he11olx.com/2018/07/21/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.6.Python%20%E4%B8%80%E8%88%AC%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <id>http://he11olx.com/2018/07/21/1.CPython3.6源码分析/1.6.Python 一般字节码/</id>
    <published>2018-07-21T04:00:00.000Z</published>
    <updated>2018-08-05T07:10:47.512Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/python/cpython/blob/3.6/Doc/library/dis.rst&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dis.rst: Disassembler for Python bytecode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_PyEval_EvalFrameDefault(PyFrameObject *f, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; throwflag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ceval.c.1144&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (;;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ceval.c.1267&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (opcode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            TARGET(LOAD_FAST)  &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            TARGET(LOAD_CONST) &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在前面我们提到，解释器会在 &lt;code&gt;_PyEval_EvalFrameDefault&lt;/code&gt;进入&lt;code&gt;for(;;)&lt;/code&gt;死循环，不断加载字节码指令，并执行。本章将通过几个常用的字节码指令，来了解 Python 字节码指令执行的逻辑。阅读本章前需了解&lt;a href=&quot;https://he11olx.com/2018/07/21/1.5.Python%20Code%20Frame/&quot;&gt;PyCodeObject/PyFrameObject&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="PyCodeObject" scheme="http://he11olx.com/tags/PyCodeObject/"/>
    
      <category term="EvalFrame" scheme="http://he11olx.com/tags/EvalFrame/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】PyCodeObject/PyFrameObject</title>
    <link href="http://he11olx.com/2018/07/21/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.5.Python%20Code%20Frame/"/>
    <id>http://he11olx.com/2018/07/21/1.CPython3.6源码分析/1.5.Python Code Frame/</id>
    <published>2018-07-21T00:00:00.000Z</published>
    <updated>2018-08-05T07:36:24.464Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-3147/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PEP3147 PYC Repository Directories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;事实上，Python虽然是解释型语言，但也需要经过 源文件 -&amp;gt;  编译 -&amp;gt;  可执行文件  -&amp;gt;  执行整个过程。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;javac Example.java  -&amp;gt; Example.class&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java Example.class   -&amp;gt; 输出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python Example.py    -&amp;gt;  创建或加载 PyCodeObject    -&amp;gt;    输出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;保存PyCodeObject到    -&amp;gt;  Example.pyc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如上，编译器在编译产生 code 后由虚拟机执行。Python 与 Java 不同之处在于 Python 的虚拟机是一种抽象层次更高的虚拟机。 在 编译结束后，Python 会将 code 对象所包含的的信息存储在 pyc 文件内，下次运行直接加载 pyc 里的 code 对象到内存。&lt;/p&gt;
&lt;p&gt;Python 解释器(interpreter)，同时拥有编译器和虚拟机的身份。具体流程参见&lt;img src=&quot;https://www.python.org/m/dev/peps/pep-3147/pep-3147-1.png&quot; alt=&quot;PEP3147&quot;&gt;PyCodeObject 包含 Python 虚拟机所需要的信息，而 pyc 就是其在硬盘实体化后的载体。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="PyCodeObject" scheme="http://he11olx.com/tags/PyCodeObject/"/>
    
      <category term="PyFrameObject" scheme="http://he11olx.com/tags/PyFrameObject/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】PyDictObject</title>
    <link href="http://he11olx.com/2018/07/15/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.4.Python%E5%AD%97%E5%85%B8%E5%AF%B9%E8%B1%A1/"/>
    <id>http://he11olx.com/2018/07/15/1.CPython3.6源码分析/1.4.Python字典对象/</id>
    <published>2018-07-15T14:00:00.000Z</published>
    <updated>2018-08-05T07:11:33.634Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.6/c-api/dict.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dictionary Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0412/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PEP412 Key-Sharing Dictionary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Python官网把 PyDictObject 归类与 &lt;code&gt;Concrete Objects Layer&lt;/code&gt;，享受同样待遇的还有&lt;code&gt;PySetObject&lt;/code&gt;。在前面 PythonUnicodeObject 中，我们已经见到了 PythonDict 的运用，即共享机制 interned。在 Python 世界里，字典被用于建立字节码的运行环境，用来存放变量名和变量值，意味着做任何操作几乎都要设计到 PythonDict，&lt;/p&gt;
&lt;p&gt;因此，对搜索的效率要求及其苛刻。因而采用的 HashTable(散列表)，在最优情况下能达到O(1)。散列表的基本思想是，将键映射为一个整数，把整数作为索引访问内存。主要逻辑是：查询键值 ——散列函数 hash function —— 散列值 hash value —— 内存区域 —— 查询结果——散列冲突。Python 处理散列冲突的问题，采用的是 开放定址法。删除探测链上元素，采用的是伪删除。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="PyDictObject" scheme="http://he11olx.com/tags/PyDictObject/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】PyListObject</title>
    <link href="http://he11olx.com/2018/07/15/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.3.Python%E5%88%97%E8%A1%A8%E5%AF%B9%E8%B1%A1/"/>
    <id>http://he11olx.com/2018/07/15/1.CPython3.6源码分析/1.3.Python列表对象/</id>
    <published>2018-07-15T04:00:00.000Z</published>
    <updated>2018-08-05T07:11:46.706Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.6/c-api/list.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;List Objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Another generally useful object type is a list of object pointers.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This is a mutable type: the list items can be changed, and items can be&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;added or removed.  Out-of-range indices or non-list objects are ignored.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;老套路，开局一段注释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象指针列表&lt;/li&gt;
&lt;li&gt;可以增删改查&lt;/li&gt;
&lt;li&gt;具有索引容错功能&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="PyListObject" scheme="http://he11olx.com/tags/PyListObject/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】PyBytesObject/PyUnicodeObject</title>
    <link href="http://he11olx.com/2018/07/15/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.2.Python%E5%AD%97%E7%AC%A6%E5%AF%B9%E8%B1%A1/"/>
    <id>http://he11olx.com/2018/07/15/1.CPython3.6源码分析/1.2.Python字符对象/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2018-08-05T07:01:53.515Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;众所周知，Python2 中存在 str、bytes、unicode，Python3中只存在 str、bytes，然而却并不表示相同的含义，Python3中的 str 即Python2中的 unicode。&lt;/p&gt;
&lt;p&gt;按照 CPython3的&lt;a href=&quot;https://docs.python.org/3/c-api/concrete.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档&lt;/a&gt;显示：Sequence Objects下辖 Bytes Objects、Unicode Objects。自&lt;a href=&quot;https://www.python.org/dev/peps/pep-0393/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PEP393&lt;/a&gt;之后，Unicode Type 变成了层次化的结构，用以减少内存占用。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="PyBytesObject" scheme="http://he11olx.com/tags/PyBytesObject/"/>
    
      <category term="PyUnicodeObject" scheme="http://he11olx.com/tags/PyUnicodeObject/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】PyLongObject</title>
    <link href="http://he11olx.com/2018/07/14/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.1.Python%E6%95%B4%E6%95%B0%E5%AF%B9%E8%B1%A1/"/>
    <id>http://he11olx.com/2018/07/14/1.CPython3.6源码分析/1.1.Python整数对象/</id>
    <published>2018-07-14T09:00:00.000Z</published>
    <updated>2018-08-05T07:12:02.496Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/c-api/long.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Integer Objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;PyLongObject&quot;&gt;&lt;a href=&quot;#PyLongObject&quot; class=&quot;headerlink&quot; title=&quot;PyLongObject&quot;&gt;&lt;/a&gt;PyLongObject&lt;/h2&gt;&lt;p&gt;在 Python2 中，存在 PyIntObject 和 PyLongObject 两种类型。前者是一个定长对象，后者是一个变长对象。Python3中 只存在后者。在 Python2 的结构体中 定义的是 long ob_ival，而 Python3 中定义的是只有1个元素的数组。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="PyLongObject" scheme="http://he11olx.com/tags/PyLongObject/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】PyObject/PyObjectType</title>
    <link href="http://he11olx.com/2018/07/14/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.0.PyObject/"/>
    <id>http://he11olx.com/2018/07/14/1.CPython3.6源码分析/1.0.PyObject/</id>
    <published>2018-07-14T04:00:00.000Z</published>
    <updated>2018-08-05T07:17:54.288Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.6/c-api/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python/C API Reference Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# object.h.8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/* Object and type object interface */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Objects are structures allocated on the heap.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Objects are never allocated statically or on the stack;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;An object has a &amp;apos;reference count&amp;apos; that is increased or decreased when a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pointer to the object is copied or deleted;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;when the reference count reaches zero there are no references to the object left&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;and it can be removed from the heap.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;An object has a &amp;apos;type&amp;apos; that determines what it represents and what kind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;of data it contains.  An object&amp;apos;s type is fixed when it is created.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Types themselves are represented as objects; an object contains a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pointer to the corresponding type object.  The type itself has a type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pointer pointing to the object representing the type &amp;apos;type&amp;apos;, which&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;contains a pointer to itself!).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;once allocated an object keeps the same size and address.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Objects that must hold variable-size data can contain pointers to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;variable-size parts of the object.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Objects are always accessed through pointers of the type &amp;apos;PyObject *&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The type &amp;apos;PyObject&amp;apos; is a structure that only contains the reference count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;and the type pointer.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A standard interface exists for objects that contain an array of items&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;whose size is determined when the object is allocated.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;开篇一段注释，从注释中能提取到很多要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象堆分配、从不栈分配&lt;/li&gt;
&lt;li&gt;垃圾回收之引用计数&lt;/li&gt;
&lt;li&gt;对象、类型对象、type&lt;/li&gt;
&lt;li&gt;容器对象可变依据：持有指针&lt;/li&gt;
&lt;li&gt;基石对象 PyObject 与类型转换&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>博客开通啦</title>
    <link href="http://he11olx.com/2018/07/12/hello-world/"/>
    <id>http://he11olx.com/2018/07/12/hello-world/</id>
    <published>2018-07-11T16:00:00.000Z</published>
    <updated>2018-07-14T08:24:17.239Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;
        
      
    
    </summary>
    
      <category term="日常" scheme="http://he11olx.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="起风了" scheme="http://he11olx.com/tags/%E8%B5%B7%E9%A3%8E%E4%BA%86/"/>
    
  </entry>
  
</feed>
