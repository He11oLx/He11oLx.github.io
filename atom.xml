<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lx&#39;s Blog</title>
  
  <subtitle>Hello world!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://he11olx.com/"/>
  <updated>2018-09-12T13:14:49.123Z</updated>
  <id>http://he11olx.com/</id>
  
  <author>
    <name>He11oLx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Python 协程系列】Gevent 源码分析</title>
    <link href="http://he11olx.com/2018/09/12/3.%E5%8D%8F%E7%A8%8B%E7%9B%B8%E5%85%B3/3.2.Gevnt%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://he11olx.com/2018/09/12/3.协程相关/3.2.Gevnt 源码分析/</id>
    <published>2018-09-12T04:00:00.000Z</published>
    <updated>2018-09-12T13:14:49.123Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gevent.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gevent.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gevent/gevent/tree/1.3.6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub:1.3.6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;gevent is a coroutine -based Python networking library that uses greenlet to provide a high-level&lt;br&gt;synchronous API on top of the libev or libuv event loop.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Features include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fast event loop based on libev or libuv.&lt;/li&gt;
&lt;li&gt;Lightweight execution units based on greenlets.&lt;/li&gt;
&lt;li&gt;API that re-uses concepts from the Python standard library (for examples there are events and queues).&lt;/li&gt;
&lt;li&gt;Cooperative sockets with SSL support&lt;/li&gt;
&lt;li&gt;Cooperative DNS queries performed through a threadpool, dnspython, or c-ares.&lt;/li&gt;
&lt;li&gt;Monkey patching utility to get 3rd party modules to become cooperative&lt;/li&gt;
&lt;li&gt;TCP/UDP/HTTP servers&lt;/li&gt;
&lt;li&gt;Subprocess support (through gevent.subprocess)&lt;/li&gt;
&lt;li&gt;Thread pools&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="gevent" scheme="http://he11olx.com/tags/gevent/"/>
    
  </entry>
  
  <entry>
    <title>【Python 协程系列】asyncio 源码分析</title>
    <link href="http://he11olx.com/2018/09/12/3.%E5%8D%8F%E7%A8%8B%E7%9B%B8%E5%85%B3/3.3.asyncio%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://he11olx.com/2018/09/12/3.协程相关/3.3.asyncio 源码分析/</id>
    <published>2018-09-12T04:00:00.000Z</published>
    <updated>2018-09-12T13:34:04.968Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/asyncio.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Library:asyncio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-3156/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PEP 3156&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;事件驱动主要是将耗时的 I/O 操作转换为待处理的事件，当某个事件触发后会调用相应的回调。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单线程中处理非常大的并发量&lt;/li&gt;
&lt;li&gt;非同步运行，代码复杂，调试困难&lt;/li&gt;
&lt;li&gt;遇到代码耗时操作/三方库阻塞，会导致整个事件循环阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从 Py3.3 开始，代号 Tulip 的项目开始启动，一直到 Py3.6 才最终成为正式系统库——asyncio。&lt;br&gt;该模块中提供了一些基础设施：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;event loop&lt;/li&gt;
&lt;li&gt;transport and protocol abstractions&lt;/li&gt;
&lt;li&gt;a higher-level schedule&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="coroutine" scheme="http://he11olx.com/tags/coroutine/"/>
    
      <category term="asyncio" scheme="http://he11olx.com/tags/asyncio/"/>
    
  </entry>
  
  <entry>
    <title>【Python 协程系列】greenlet 源码分析</title>
    <link href="http://he11olx.com/2018/09/12/3.%E5%8D%8F%E7%A8%8B%E7%9B%B8%E5%85%B3/3.1.Greenlet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://he11olx.com/2018/09/12/3.协程相关/3.1.Greenlet 源码分析/</id>
    <published>2018-09-12T04:00:00.000Z</published>
    <updated>2018-09-12T13:41:39.230Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://greenlet.readthedocs.io/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;greenlet:Lightweight concurrent programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/python-greenlet/greenlet/tree/0.4.14&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github:0.4.14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/fjslovejhl/article/details/38824963&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CSDN:fjs_cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;C在过程调用时，使用栈帧来传递参数、存储返回信息、保存寄存器，以及局部存储。&lt;br&gt;Python 在执行的时，以 PyFrameObject 作为环境，不断加载 PyCodeObject 进行执行。&lt;br&gt;greenlet 就是利用 C 栈和 PyFrameObject，这两个特性，实现了协程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://t1.aixinxi.net/o_1cn707dkr2o611us1ek2r0s95ia.png-w.jpg&quot; alt=&quot;C栈帧结构&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="greenlet" scheme="http://he11olx.com/tags/greenlet/"/>
    
      <category term="coroutine" scheme="http://he11olx.com/tags/coroutine/"/>
    
  </entry>
  
  <entry>
    <title>【Python Web 系列】Django 源码分析</title>
    <link href="http://he11olx.com/2018/09/12/2.Python%20Web/2.4.Django%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://he11olx.com/2018/09/12/2.Python Web/2.4.Django 源码分析/</id>
    <published>2018-09-12T04:00:00.000Z</published>
    <updated>2018-09-12T13:20:37.616Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;
        
      
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="Django" scheme="http://he11olx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>【Python Web 系列】WSGI</title>
    <link href="http://he11olx.com/2018/09/12/2.Python%20Web/2.1.WSGI/"/>
    <id>http://he11olx.com/2018/09/12/2.Python Web/2.1.WSGI/</id>
    <published>2018-09-12T04:00:00.000Z</published>
    <updated>2018-09-12T13:20:27.125Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;对一个 Python Web 开发者来说，PEP333/PEP3333，是必须熟悉的。都什么年代了，我们自然直接看 3333。&lt;/p&gt;
&lt;h2 id=&quot;PEP-3333&quot;&gt;&lt;a href=&quot;#PEP-3333&quot; class=&quot;headerlink&quot; title=&quot;PEP 3333&quot;&gt;&lt;/a&gt;PEP 3333&lt;/h2&gt;&lt;p&gt;PEP3333，描述了 Web 服务器与 Python Web 应用程序或框架之间的建议标准接口，&lt;br&gt;以促进跨各种 Web 服务器的应用程序的可移植性，形成类似于Java 的 “servlet” API。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CGI：Common Gateway Interface，&lt;a href=&quot;https://tools.ietf.org/html/draft-coar-cgi-v11-03&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;通用网关接口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;WSGI：(Python)Web Server Gateway Interface，&lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python服务器网关接口&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="WSGI" scheme="http://he11olx.com/tags/WSGI/"/>
    
  </entry>
  
  <entry>
    <title>【Python Web 系列】—— 系列文章目录及介绍</title>
    <link href="http://he11olx.com/2018/09/12/2.Python%20Web/2.0.Python%20Web%20%E7%9B%AE%E5%BD%95/"/>
    <id>http://he11olx.com/2018/09/12/2.Python Web/2.0.Python Web 目录/</id>
    <published>2018-09-12T04:00:00.000Z</published>
    <updated>2018-09-12T13:48:19.243Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;
        
      
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
      <category term="目录" scheme="http://he11olx.com/categories/Python/%E7%9B%AE%E5%BD%95/"/>
    
    
      <category term="目录" scheme="http://he11olx.com/tags/%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>【Python Web 系列】Flask 源码分析</title>
    <link href="http://he11olx.com/2018/09/12/2.Python%20Web/2.2.Flask%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://he11olx.com/2018/09/12/2.Python Web/2.2.Flask 源码分析/</id>
    <published>2018-09-12T04:00:00.000Z</published>
    <updated>2018-09-12T13:20:20.276Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://flask.pocoo.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flask 官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://werkzeug.pocoo.org/docs/0.14/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;werkzeug 官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;Demo&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Flask.__version__ == 1.0.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Flask&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app = Flask(__name__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@app.route(&quot;/&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    app.run()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Flask&quot;&gt;&lt;a href=&quot;#Flask&quot; class=&quot;headerlink&quot; title=&quot;Flask&quot;&gt;&lt;/a&gt;Flask&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(_PackageBoundObject)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wsgi_app&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, environ, start_response)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, environ, start_response)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.wsgi_app(environ, start_response)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Flask实例化后，就是一个符合 WSGI 规定的，可调用对象。再来看看实例化都要干些啥。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="Flask" scheme="http://he11olx.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>【Python Web 系列】Django 一些 trick</title>
    <link href="http://he11olx.com/2018/09/12/2.Python%20Web/2.5.Django%20%E4%B8%80%E4%BA%9B%20trick/"/>
    <id>http://he11olx.com/2018/09/12/2.Python Web/2.5.Django 一些 trick/</id>
    <published>2018-09-12T04:00:00.000Z</published>
    <updated>2018-09-12T13:20:41.496Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;
        
      
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="Django" scheme="http://he11olx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Python 协程系列 —— 系列文章目录及介绍</title>
    <link href="http://he11olx.com/2018/09/12/3.%E5%8D%8F%E7%A8%8B%E7%9B%B8%E5%85%B3/3.0.Python%20%E5%8D%8F%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    <id>http://he11olx.com/2018/09/12/3.协程相关/3.0.Python 协程系列/</id>
    <published>2018-09-12T04:00:00.000Z</published>
    <updated>2018-09-12T13:48:31.916Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;
        
      
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
      <category term="目录" scheme="http://he11olx.com/categories/Python/%E7%9B%AE%E5%BD%95/"/>
    
    
      <category term="目录" scheme="http://he11olx.com/tags/%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>【Python Web 系列】Tornado 源码分析</title>
    <link href="http://he11olx.com/2018/09/12/2.Python%20Web/2.6.Tornado%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://he11olx.com/2018/09/12/2.Python Web/2.6.Tornado 源码分析/</id>
    <published>2018-09-12T04:00:00.000Z</published>
    <updated>2018-09-12T13:40:19.235Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tornadoweb.org/en/stable/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tornado&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tornadoweb/tornado/tree/v5.1.0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub: 5.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Tornado is a Python web framework and asynchronous networking library。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;包含以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A web framework，继承 RequestHandler 创建 application&lt;/li&gt;
&lt;li&gt;Client- and server-side implementions of HTTP (HTTPServer and AsyncHTTPClient).&lt;/li&gt;
&lt;li&gt;An asynchronous networking library including the classes IOLoop and IOStream&lt;/li&gt;
&lt;li&gt;A coroutine library (tornado.gen)，现已经推荐使用 Native Cocoutine。&lt;/li&gt;
&lt;li&gt;虽然兼容其他WSGI server/client，但无法发挥 Tornado 的高并发、长连接特点&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="web" scheme="http://he11olx.com/tags/web/"/>
    
      <category term="tornado" scheme="http://he11olx.com/tags/tornado/"/>
    
  </entry>
  
  <entry>
    <title>【Python 协程系列】Python 原生协程</title>
    <link href="http://he11olx.com/2018/09/12/3.%E5%8D%8F%E7%A8%8B%E7%9B%B8%E5%85%B3/3.2.Python%20%E5%8E%9F%E7%94%9F%E5%8D%8F%E7%A8%8B/"/>
    <id>http://he11olx.com/2018/09/12/3.协程相关/3.2.Python 原生协程/</id>
    <published>2018-09-12T04:00:00.000Z</published>
    <updated>2018-09-12T13:15:13.124Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#async-iterators&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Data Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0492/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PEP492&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0525/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PEP525&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PEP 255 -- Simple Generators&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python-Version:	2.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PEP 342 -- Coroutines via Enhanced Generators&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python-Version:	2.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PEP 380 -- Syntax for Delegating to a Subgenerator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python-Version:	3.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PEP 492 -- Coroutines with async and await syntax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python-Version:	3.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PEP 525 -- Asynchronous Generators&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python-Version:	3.6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;emm…上面算是 Python 中 Coroutines 的发展史了，具体内容可以参考 PEP。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="coroutine" scheme="http://he11olx.com/tags/coroutine/"/>
    
  </entry>
  
  <entry>
    <title>【Python Web 系列】Flask 一些 trick</title>
    <link href="http://he11olx.com/2018/09/12/2.Python%20Web/2.3.Flask%20%E4%B8%80%E4%BA%9B%20trick/"/>
    <id>http://he11olx.com/2018/09/12/2.Python Web/2.3.Flask 一些 trick/</id>
    <published>2018-09-12T04:00:00.000Z</published>
    <updated>2018-09-12T13:20:58.179Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;
        
      
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="Flask" scheme="http://he11olx.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>CPython3.6源码分析——系列文章目录及介绍</title>
    <link href="http://he11olx.com/2018/08/05/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.%20%E7%9B%AE%E5%BD%95/"/>
    <id>http://he11olx.com/2018/08/05/1.CPython3.6源码分析/1. 目录/</id>
    <published>2018-08-05T14:00:00.000Z</published>
    <updated>2018-08-05T08:43:31.990Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;
        
      
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="目录" scheme="http://he11olx.com/tags/%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】Python 垃圾回收</title>
    <link href="http://he11olx.com/2018/08/05/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.15.%20Python%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>http://he11olx.com/2018/08/05/1.CPython3.6源码分析/1.15. Python 垃圾回收/</id>
    <published>2018-08-05T10:00:00.000Z</published>
    <updated>2018-08-05T07:15:43.640Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;垃圾回收一般分为两个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;垃圾检测，从所有已分配的内存中识别出可以回收和不可以回收的内存&lt;/li&gt;
&lt;li&gt;垃圾回收，是系统从掌握在检测阶段标识出的可回收内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python 基于古老的引用计数，必须在每次分配和释放内存时，加入 计数 的动作。&lt;br&gt;引用计数，其特点和缺点都很明显&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：实时性，发生在整个程序运行期间&lt;/li&gt;
&lt;li&gt;缺点：循环引用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python 为了解决循环引用，引入了标记清除和分代收集两种技术。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="内存管理" scheme="http://he11olx.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】Python 内存管理机制</title>
    <link href="http://he11olx.com/2018/08/05/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.14.Python%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://he11olx.com/2018/08/05/1.CPython3.6源码分析/1.14.Python 内存管理/</id>
    <published>2018-08-05T04:00:00.000Z</published>
    <updated>2018-08-05T07:29:20.958Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0445/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PEP445&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/c-api/memory.html#default-memory-allocators&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;default-memory-allocators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;内存策略&quot;&gt;&lt;a href=&quot;#内存策略&quot; class=&quot;headerlink&quot; title=&quot;内存策略&quot;&gt;&lt;/a&gt;内存策略&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;An object allocator for Python.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Here is an introduction to the layers of the Python memory architecture,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   showing where the object allocator is actually used (layer +2), It is&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   called for every object allocation and deallocation (PyObject_New/Del).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   This is also the place where the cyclic garbage collector operates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   selectively on container objects.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _____   ______   ______       ________&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [ int ] [ dict ] [ list ] ... [ string ]       Python core         |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+3 | &amp;lt;----- Object-specific memory -----&amp;gt; | &amp;lt;-- Non-object memory --&amp;gt; |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _______________________________       |                           |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [   Python&amp;apos;s object allocator   ]      |                           |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+2 | ####### Object memory ####### | &amp;lt;------ Internal buffers ------&amp;gt; |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ______________________________________________________________    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [          Python&amp;apos;s raw memory allocator (PyMem_ API)          ]   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+1 | &amp;lt;----- Python memory (under PyMem manager&amp;apos;s control) ------&amp;gt; |   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __________________________________________________________________&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [    Underlying general-purpose allocator (ex: C library malloc)   ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 0 | &amp;lt;------ Virtual memory allocated for the python process -------&amp;gt; |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   =========================================================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _______________________________________________________________________&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [                OS-specific Virtual Memory Manager (VMM)               ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-1 | &amp;lt;--- Kernel dynamic storage allocation &amp;amp; management (page-based) ---&amp;gt; |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __________________________________   __________________________________&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [                                  ] [                                  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-2 | &amp;lt;-- Physical memory: ROM/RAM --&amp;gt; | | &amp;lt;-- Secondary storage (swap) --&amp;gt; |&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过&lt;code&gt;obmalloc.c&lt;/code&gt;这段注释，我们可以获取到很多内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 内存管理，是分层次的&lt;/li&gt;
&lt;li&gt;对象的创建、销毁、 GC 都发生在+2层&lt;/li&gt;
&lt;li&gt;在最顶层，不同的对象有着不同的分配策略&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从分层机制上看，似乎这个 allocator 不是固定的，那么是不是意味着可以自定义？&lt;br&gt;答案是肯定的，在 3.6 中可以通过环境变量 PYTHONMALLOC 改变分配器，甚至是自定义，&lt;br&gt;参考&lt;a href=&quot;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONMALLOC&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Environment variables&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="内存管理" scheme="http://he11olx.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】Python 多线程机制</title>
    <link href="http://he11olx.com/2018/08/04/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.13.Python%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/"/>
    <id>http://he11olx.com/2018/08/04/1.CPython3.6源码分析/1.13.Python 多线程机制/</id>
    <published>2018-08-04T10:00:00.000Z</published>
    <updated>2018-08-05T07:15:43.630Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Python 的 GIL 可谓“大名鼎鼎”，正是由它控制着字节码解释器的执行权限。跟操作系统的进程调度一样，Python 必然会存在一个调度机制，决定了什么时候该进行线程切换。Python 也通过时间片的方式，挂起当前线程，切换其他线程。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sys.getcheckinterval()、sys.setcheckinterval()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在 Python3.2 中已经被弃用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sys.getswitchinterval()、sys.setswitchinterval()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/* microseconds (the Python API uses seconds, though) */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define DEFAULT_INTERVAL 5000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static unsigned long gil_interval = DEFAULT_INTERVAL;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从3.2起，Python 的线程时间片控制，由以前的指令数改为了时间控制，默认0.005秒，可通过API进行更改。线程调度策略，依然是由操作系统决定，解释器仅参与GIL的释放和申请。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】Python 环境初始化</title>
    <link href="http://he11olx.com/2018/08/04/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.12.Python%20%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://he11olx.com/2018/08/04/1.CPython3.6源码分析/1.12.Python 环境初始化/</id>
    <published>2018-08-04T04:00:00.000Z</published>
    <updated>2018-08-05T07:29:20.964Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/c-api/init.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Before Python Initialization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一步步走来，我们已经了解了 Python对象机制，字节码执行机制，函数调用，类实例创建机制。这些内容都是在 Python 环境已经初始化完成后，才进行的工作。那么是时候看看，运行环境初始化，都干了些什么。&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;main&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;main&quot;&gt;&lt;a href=&quot;#main&quot; class=&quot;headerlink&quot; title=&quot;main&quot;&gt;&lt;/a&gt;main&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// python.c.18&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; **argv)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res = Py_Main(argc, argv_copy);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Modules/main.c.348&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Py_Main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;wchar_t&lt;/span&gt; **argv)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Py_Initialize();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (command) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sts = run_command(command, &amp;amp;cf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PyMem_RawFree(command);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sts = (RunModule(&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 处理 fp、filename */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sts = run_file(fp, filename, &amp;amp;cf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sts &lt;span class=&quot;comment&quot;&gt;/* 0 正常退出，1 异常退出，2 参数列表不正确 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，跟普通的 C 程序一样，通过入口 main 进入到 Py_Main，在调用&lt;code&gt;Py_Initialize&lt;/code&gt;进行初始化，然后根据参数列表进行分发。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】Python 自定义类</title>
    <link href="http://he11olx.com/2018/07/28/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.11.Python%20%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB/"/>
    <id>http://he11olx.com/2018/07/28/1.CPython3.6源码分析/1.11.Python 自定义类/</id>
    <published>2018-07-28T10:00:00.000Z</published>
    <updated>2018-08-21T15:52:00.437Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-3115/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PEP3115 Metaclasses in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在上一讲，我们谈到了内置类的初始化工作，其中最主要的逻辑落在 PyType_Ready 中。本讲，我们将主要查看用户自定义类及实例化，在 Python 中的实现过程。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="类机制" scheme="http://he11olx.com/tags/%E7%B1%BB%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】Python 类机制</title>
    <link href="http://he11olx.com/2018/07/28/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.10.Python%20%E7%B1%BB%E6%9C%BA%E5%88%B6/"/>
    <id>http://he11olx.com/2018/07/28/1.CPython3.6源码分析/1.10.Python 类机制/</id>
    <published>2018-07-28T04:00:00.000Z</published>
    <updated>2018-08-05T07:36:24.452Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://he11olx.com/2018/07/14/1.0.PyObject/&quot;&gt;PyObject/PyObjectType&lt;/a&gt;，我们已经看到过，PyObject、PyTypeObject、PyType_Type、PyBaseObject_Type。&lt;/p&gt;
&lt;p&gt;下面通过几个例子来具体描述关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实例，通过&lt;code&gt;isinstance()&lt;/code&gt;方法，检查其 ob_type 是否一致。&lt;/li&gt;
&lt;li&gt;子类，通过&lt;code&gt;issubclass()&lt;/code&gt;方法，检查其 bases 是否存在继承关系。
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="类机制" scheme="http://he11olx.com/tags/%E7%B1%BB%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>【CPython3.6源码分析】Python 函数机制</title>
    <link href="http://he11olx.com/2018/07/21/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.9.Python%20%E5%87%BD%E6%95%B0%E6%9C%BA%E5%88%B6/"/>
    <id>http://he11olx.com/2018/07/21/1.CPython3.6源码分析/1.9.Python 函数机制/</id>
    <published>2018-07-21T14:00:00.000Z</published>
    <updated>2018-08-25T09:36:24.021Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.6/c-api/function.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Function Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/python/cpython/blob/3.6/Doc/library/dis.rst&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dis.rst: Disassembler for Python bytecode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在前面我们已经知道 Python 通过PyInterpreterState 对象模拟进程的状态信息，通过 PyThreadState 对象模拟线程的状态信息，通过PyFrameObject 模拟函数调用时的栈帧信息。FrameObject 通过 f_back 指针，形成函数调用的链式结构。那么要实现函数间的调用，就必然存在多个 Frame。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://he11olx.com/categories/Python/"/>
    
    
      <category term="CPython3.6源码" scheme="http://he11olx.com/tags/CPython3-6%E6%BA%90%E7%A0%81/"/>
    
      <category term="PyFunctionObject" scheme="http://he11olx.com/tags/PyFunctionObject/"/>
    
  </entry>
  
</feed>
